
Notes on Version 1.0.0 from Peter Dufault (dufault@hda.com).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I plowed through this code when I was interested in OBD software for
a laptop, and I also hacked it extensively in order to learn how it worked
and to make it meet a few guidelines.  I may have screwed up, and so if
I did, let me know and we'll clean things up.

Here are some of the rules I was following:

1. The code should adhere to the C language standards that avoid silly
problems.  That means, everything needs to have prototypes, and
shouldn't have redundant prototypes, etc.

2. The code should adhere to POSIX defined OS interfaces when
possible.  Everyone, that is, LINUX (the original platform), my own
personal embedded interfaces, Solaris, HP-UX, AIX, FreeBSD, etc,
etc, all promise to follow the POSIX interfaces, and so if we follow
them closely and one of the system's  misbehaves at least we can
grouch about them as we figure out a work around.

3. The code should be C++ friendly.  This is because I have found it
convenient to temporarily redefine a struct to be class so that I
can see who is poking around in it, and because overall I find C++ a
much better place to work, even in embedded systems.

4. The code should be appropriate for embedding in a microcontroller.
I work on microcontrollers and this seems to be the kind of code
that should run on one.  This means I've been really suspicious
about uninitialized data and stack sizes.

5. The code should be aesthetic, both in appearance and presentation.
It should be well formatted physically, and polite to other viewpoints.
I've probably broken this because I use four-space tabs and other
people use eight-space tabs.  I hope I haven't violated the viewpoint
rule.  Let me know.

Peter

